# handlers/downtime_handlers.py
import logging
from datetime import datetime
import json
import asyncio

from aiogram import Dispatcher, types, Bot
from aiogram.types import ContentType
from aiogram.dispatcher import FSMContext
from pytz import timezone

from fsm import DowntimeForm
from utils.storage import DataStorage
from config import (PRODUCTION_SITES, LINES_SECTIONS, DOWNTIME_REASONS, SCHEDULER_TIMEZONE)
from keyboards import inline
from utils.reports import calculate_shift_times
from g_sheets.api import append_downtime_record, get_next_sequence_number

# --- –ù–∞—á–∞–ª–æ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ FSM ---

async def start_downtime_entry(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å—Ç–æ–µ."""
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    
    logging.info(f"User {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –ø—Ä–æ—Å—Ç–æ—è.")
    await state.finish()
    if not storage.responsible_groups:
        logging.warning("–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—É—Å—Ç. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...")
        await storage.load_responsible_groups()
        if not storage.responsible_groups:
             await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
    
    await DowntimeForm.choosing_site.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É:", reply_markup=inline.get_sites_keyboard())

async def back_to_sites(cb: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–ª–æ—â–∞–¥–∫–∏."""
    await DowntimeForm.choosing_site.set()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É:", reply_markup=inline.get_sites_keyboard())
    await cb.answer()

async def back_to_lines(cb: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ª–∏–Ω–∏–∏."""
    async with state.proxy() as data:
        site_key = data.get('site_key')
    await DowntimeForm.choosing_line_section.set()
    await cb.message.edit_text(
        f"–ü–ª–æ—â–∞–¥–∫–∞: {PRODUCTION_SITES[site_key]}.\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é/—Å–µ–∫—Ü–∏—é:",
        reply_markup=inline.get_lines_sections_keyboard(site_key)
    )
    await cb.answer()

# --- –®–∞–≥–∏ FSM ---

async def process_site_choice(cb: types.CallbackQuery, state: FSMContext):
    site_key = cb.data.split('_')[1]
    site_name = PRODUCTION_SITES[site_key]
    await state.update_data(site_key=site_key, site_name=site_name)
    await DowntimeForm.next()
    await cb.message.edit_text(
        f"–ü–ª–æ—â–∞–¥–∫–∞: {site_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é/—Å–µ–∫—Ü–∏—é:",
        reply_markup=inline.get_lines_sections_keyboard(site_key)
    )
    await cb.answer()

async def process_line_section_choice(cb: types.CallbackQuery, state: FSMContext):
    ls_key = cb.data.split('_')[1]
    async with state.proxy() as data:
        site_key = data['site_key']
        data['ls_key'] = ls_key
        data['ls_name'] = LINES_SECTIONS[site_key][ls_key]
    await DowntimeForm.next()
    await cb.message.edit_text(
        f"–õ–∏–Ω–∏—è/—Å–µ–∫—Ü–∏—è: {data['ls_name']}.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—è:",
        reply_markup=inline.get_downtime_reasons_keyboard()
    )
    await cb.answer()

async def process_reason_choice(cb: types.CallbackQuery, state: FSMContext):
    reason_key = cb.data.split('_', 1)[1]
    reason_name = DOWNTIME_REASONS[reason_key]
    await state.update_data(reason_key=reason_key, reason_name=reason_name)
    await DowntimeForm.next()
    await cb.message.edit_text(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {reason_name}.\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.")
    await cb.answer()

async def process_description(message: types.Message, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    tz = timezone(SCHEDULER_TIMEZONE)
    async with state.proxy() as data:
        data['description'] = message.text
        data['downtime_start_time'] = datetime.now(tz)
        data['photo_file_id'] = "" # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –Ω–µ—Ç
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ
        storage.active_downtimes[(data['site_name'], data['ls_name'])] = data.get('reason_name', '–ü—Ä–æ—Å—Ç–æ–π')
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –¥–ª—è {data['site_name']}/{data['ls_name']}")
    await DowntimeForm.choosing_responsible_group.set()
    await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É:", reply_markup=inline.get_responsible_groups_keyboard(storage))

async def process_initial_photo(message: types.Message, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    tz = timezone(SCHEDULER_TIMEZONE)
    
    photo_file_id = message.photo[-1].file_id
    description = message.caption or "–§–æ—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

    async with state.proxy() as data:
        data['description'] = description
        data['photo_file_id'] = photo_file_id
        data['downtime_start_time'] = datetime.now(tz)
        storage.active_downtimes[(data['site_name'], data['ls_name'])] = data.get('reason_name', '–ü—Ä–æ—Å—Ç–æ–π')
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π c —Ñ–æ—Ç–æ –¥–ª—è {data['site_name']}/{data['ls_name']}")

    await DowntimeForm.choosing_responsible_group.set()
    await message.reply("–§–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É:", reply_markup=inline.get_responsible_groups_keyboard(storage))

async def skip_description(message: types.Message, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    tz = timezone(SCHEDULER_TIMEZONE)
    async with state.proxy() as data:
        data['description'] = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        data['downtime_start_time'] = datetime.now(tz)
        data['photo_file_id'] = "" # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –Ω–µ—Ç
        storage.active_downtimes[(data['site_name'], data['ls_name'])] = data.get('reason_name', '–ü—Ä–æ—Å—Ç–æ–π')
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –¥–ª—è {data['site_name']}/{data['ls_name']}")
    await DowntimeForm.choosing_responsible_group.set()
    await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É:", reply_markup=inline.get_responsible_groups_keyboard(storage))

# --- –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ ---

async def process_group_choice(cb: types.CallbackQuery, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    bot = cb.bot
    
    group_key = cb.data.split('group_', 1)[1]
    group_name = storage.responsible_groups.get(group_key)
    user = cb.from_user

    if not group_name:
        await cb.message.edit_text("–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    tz = timezone(SCHEDULER_TIMEZONE)
    async with state.proxy() as data:
        data['responsible_group_name'] = group_name
        if 'downtime_start_time' not in data:
            data['downtime_start_time'] = datetime.now(tz)
    
    fsm_data = await state.get_data()
    group_id = storage.group_ids.get(group_name)

    if not group_id:
        logging.warning(f"ID –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ—Å—Ç–æ–π –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        await DowntimeForm.waiting_for_downtime_end.set()
        await cb.message.edit_text(f"–ì—Ä—É–ø–ø–∞: {group_name} (ID –Ω–µ –Ω–∞–π–¥–µ–Ω).\n–ù–∞–∂–º–∏—Ç–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è:",
                                   reply_markup=inline.get_end_downtime_keyboard())
        return

    request_id = f"dt_{user.id}_{int(datetime.now().timestamp())}"
    start_time_obj = fsm_data.get('downtime_start_time')
    start_time_str = start_time_obj.strftime('%H:%M:%S %d.%m.%Y') if start_time_obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    notif_text = (f"üîî **–ù–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π (ID: {request_id})**\n\n"
                  f"–ü–ª–æ—â–∞–¥–∫–∞: {fsm_data.get('site_name', '–ù/–î')}\n"
                  f"–õ–∏–Ω–∏—è/–°–µ–∫—Ü–∏—è: {fsm_data.get('ls_name', '–ù/–î')}\n"
                  f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {fsm_data.get('reason_name', '–ù/–î')}\n"
                  f"–û–ø–∏—Å–∞–Ω–∏–µ: {fsm_data.get('description', '–ù/–î')}\n"
                  f"–ù–∞—á–∞–ª–æ: {start_time_str}\n"
                  f"–ó–∞—è–≤–∏—Ç–µ–ª—å: {user.full_name}")
    
    photo_id = fsm_data.get("photo_file_id")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if photo_id:
            msg_to_group = await bot.send_photo(group_id, photo=photo_id, caption=notif_text, parse_mode='Markdown', reply_markup=inline.get_accept_downtime_keyboard(request_id))
        else:
            msg_to_group = await bot.send_message(group_id, notif_text, parse_mode='Markdown', reply_markup=inline.get_accept_downtime_keyboard(request_id))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        storage.pending_requests[request_id] = {
            "request_id": request_id,
            "creation_time": datetime.now().isoformat(),
            "status": "pending_acceptance",
            "reminders_sent_group": 0,
            "reminders_sent_initiator": 0,
            "initiating_user_id": user.id,
            "initiating_user_chat_id": cb.message.chat.id,
            "responsible_group_name": group_name,
            "responsible_group_id": group_id,
            "downtime_fsm_data_json": json.dumps(fsm_data, default=str),
            "group_notification_message_id": msg_to_group.message_id,
            "group_notification_text": notif_text,
            "ls_name": fsm_data.get('ls_name', '')
        }
        
        await DowntimeForm.waiting_for_group_acceptance.set()
        await cb.message.edit_text(f"–ì—Ä—É–ø–ø–∞: {group_name}.\n–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏—è.")
        
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.", reply_markup=inline.get_group_send_fail_keyboard())

async def skip_group_choice(cb: types.CallbackQuery, state: FSMContext):
    await state.update_data(responsible_group_name="–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    await DowntimeForm.waiting_for_downtime_end.set()
    await cb.message.edit_text("–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø—Ä–æ–ø—É—â–µ–Ω.\n–ù–∞–∂–º–∏—Ç–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è:",
                               reply_markup=inline.get_end_downtime_keyboard())

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—è ---

async def end_downtime_with_comment(cb: types.CallbackQuery, state: FSMContext):
    await DowntimeForm.entering_additional_comment.set()
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è):")
    await cb.answer()

async def process_additional_comment(message: types.Message, state: FSMContext):
    await state.update_data(additional_comment_initiator=message.text)
    await save_downtime_record(message, state)

async def end_downtime_no_comment(cb: types.CallbackQuery, state: FSMContext):
    await state.update_data(additional_comment_initiator="–ë–µ–∑ –¥–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    await save_downtime_record(cb, state)

async def save_downtime_record(update: types.Update, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    bot = Bot.get_current()
    
    if isinstance(update, types.CallbackQuery):
        user = update.from_user
        chat_id = update.message.chat.id
        try:
            await bot.edit_message_reply_markup(chat_id, update.message.message_id, reply_markup=None)
        except Exception: 
            pass
    else:
        user = update.from_user
        chat_id = update.chat.id
        
    async with state.proxy() as data:
        request_id_to_clear = data.get('request_id')
        next_seq_num = get_next_sequence_number(storage.downtime_ws)
        start_time_val = data.get('downtime_start_time')
        start_time = datetime.fromisoformat(start_time_val) if isinstance(start_time_val, str) else start_time_val

        if not start_time:
            await bot.send_message(chat_id, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return
        
        tz = timezone(SCHEDULER_TIMEZONE)
        end_time = datetime.now(tz)
        duration_minutes = max(1, int((end_time - start_time).total_seconds() / 60))
        shift_start_str, shift_end_str = calculate_shift_times(start_time)
        
        record_data = {
            "–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏": next_seq_num, "Timestamp_–∑–∞–ø–∏—Å–∏": datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S"),
            "ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_Telegram": user.id, "Username_Telegram": user.username or "N/A",
            "–ò–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_Telegram": user.full_name, "–ü–ª–æ—â–∞–¥–∫–∞": data.get('site_name', '–ù/–î'),
            "–õ–∏–Ω–∏—è_–°–µ–∫—Ü–∏—è": data.get('ls_name', '–ù/–î'), "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–ø—Ä–æ—Å—Ç–æ—è": data.get('reason_name', '–ù/–î'),
            "–ü—Ä–∏—á–∏–Ω–∞_–ø—Ä–æ—Å—Ç–æ—è_–æ–ø–∏—Å–∞–Ω–∏–µ": data.get('description', '–ù/–î'), "–í—Ä–µ–º—è_–ø—Ä–æ—Å—Ç–æ—è_–º–∏–Ω—É—Ç": duration_minutes,
            "–ù–∞—á–∞–ª–æ_—Å–º–µ–Ω—ã_–ø—Ä–æ—Å—Ç–æ—è": shift_start_str, "–ö–æ–Ω–µ—Ü_—Å–º–µ–Ω—ã_–ø—Ä–æ—Å—Ç–æ—è": shift_end_str,
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è_–≥—Ä—É–ø–ø–∞": data.get('responsible_group_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            "–ö—Ç–æ_–ø—Ä–∏–Ω—è–ª_–∑–∞—è–≤–∫—É_ID": data.get('accepted_by_user_id', ''), "–ö—Ç–æ_–ø—Ä–∏–Ω—è–ª_–∑–∞—è–≤–∫—É_–ò–º—è": data.get('accepted_by_user_name', ''),
            "–í—Ä–µ–º—è_–ø—Ä–∏–Ω—è—Ç–∏—è_–∑–∞—è–≤–∫–∏": data.get('acceptance_time', ''), "–ö—Ç–æ_–∑–∞–≤–µ—Ä—à–∏–ª_—Ä–∞–±–æ—Ç—É_–≤_–≥—Ä—É–ø–ø–µ_ID": data.get('group_completed_by_id', ''),
            "–ö—Ç–æ_–∑–∞–≤–µ—Ä—à–∏–ª_—Ä–∞–±–æ—Ç—É_–≤_–≥—Ä—É–ø–ø–µ_–ò–º—è": data.get('group_completed_by_name', ''), "–í—Ä–µ–º—è_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è_—Ä–∞–±–æ—Ç—ã_–≥—Ä—É–ø–ø–æ–π": data.get('group_completion_time', ''),
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞": data.get('additional_comment_initiator', '–ë–µ–∑ –¥–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'),
            "ID_–§–æ—Ç–æ": data.get('photo_file_id', '')
        }

    if append_downtime_record(storage.downtime_ws, record_data):
        try:
            line_key = (record_data['–ü–ª–æ—â–∞–¥–∫–∞'], record_data['–õ–∏–Ω–∏—è_–°–µ–∫—Ü–∏—è'])
            if line_key in storage.active_downtimes:
                del storage.active_downtimes[line_key]
                logging.info(f"–£–¥–∞–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –¥–ª—è {line_key[0]}/{line_key[1]}")
            if request_id_to_clear and request_id_to_clear in storage.pending_requests:
                del storage.pending_requests[request_id_to_clear]
                logging.info(f"–ó–∞—è–≤–∫–∞ {request_id_to_clear} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        except KeyError:
            pass

        await storage.refresh_downtime_cache(bot)
        
        summary_lines = [f"‚úÖ **–ó–∞—è–≤–∫–∞ ‚Ññ{next_seq_num} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!**\n"]
        summary_lines.append(f"**–ü–ª–æ—â–∞–¥–∫–∞:** {record_data['–ü–ª–æ—â–∞–¥–∫–∞']}")
        summary_lines.append(f"**–õ–∏–Ω–∏—è/–°–µ–∫—Ü–∏—è:** {record_data['–õ–∏–Ω–∏—è_–°–µ–∫—Ü–∏—è']}")
        summary_lines.append(f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {record_data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–ø—Ä–æ—Å—Ç–æ—è']}")
        summary_lines.append(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {record_data['–ü—Ä–∏—á–∏–Ω–∞_–ø—Ä–æ—Å—Ç–æ—è_–æ–ø–∏—Å–∞–Ω–∏–µ']}")
        summary_lines.append(f"**–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è:** {record_data['–í—Ä–µ–º—è_–ø—Ä–æ—Å—Ç–æ—è_–º–∏–Ω—É—Ç']} –º–∏–Ω.\n")
        
        if record_data.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è_–≥—Ä—É–ø–ø–∞') and record_data['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è_–≥—Ä—É–ø–ø–∞'] != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
            summary_lines.append(f"**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞:** {record_data['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è_–≥—Ä—É–ø–ø–∞']}")
        
        final_comment = record_data.get('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞')
        if final_comment and '–ë–µ–∑ –¥–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' not in final_comment:
            summary_lines.append(f"**–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {final_comment}")

        summary_caption = "\n".join(summary_lines)
        
        photo_id = record_data.get("ID_–§–æ—Ç–æ")
        if photo_id:
            await bot.send_photo(chat_id, photo=photo_id, caption=summary_caption, parse_mode='Markdown')
        else:
            await bot.send_message(chat_id, summary_caption, parse_mode='Markdown')
    else:
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets.")
    
    await state.finish()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
def register_downtime_handlers(dp: Dispatcher):
    dp.register_message_handler(start_downtime_entry, text="üìä –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –æ –ü—Ä–æ—Å—Ç–æ–µ", state="*")
    
    dp.register_callback_query_handler(back_to_sites, text="back_to_sites", state=DowntimeForm.choosing_line_section)
    dp.register_callback_query_handler(back_to_lines, text="back_to_lines_sections", state=DowntimeForm.choosing_downtime_reason)

    dp.register_callback_query_handler(process_site_choice, lambda c: c.data.startswith('site_'), state=DowntimeForm.choosing_site)
    dp.register_callback_query_handler(process_line_section_choice, lambda c: c.data.startswith('ls_'), state=DowntimeForm.choosing_line_section)
    dp.register_callback_query_handler(process_reason_choice, lambda c: c.data.startswith('reason_'), state=DowntimeForm.choosing_downtime_reason)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —à–∞–≥–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫)
    dp.register_message_handler(skip_description, commands=['skip'], state=DowntimeForm.entering_description)
    dp.register_message_handler(process_description, state=DowntimeForm.entering_description, content_types=[ContentType.TEXT])
    dp.register_message_handler(process_initial_photo, state=DowntimeForm.entering_description, content_types=[ContentType.PHOTO])

    dp.register_callback_query_handler(process_group_choice, lambda c: c.data.startswith('group_'), state=DowntimeForm.choosing_responsible_group)
    dp.register_callback_query_handler(skip_group_choice, text="skip_group_selection", state=DowntimeForm.choosing_responsible_group)

    dp.register_callback_query_handler(end_downtime_with_comment, text="end_downtime_with_comment", state=DowntimeForm.waiting_for_downtime_end)
    dp.register_callback_query_handler(end_downtime_no_comment, text="end_downtime_without_comment", state=DowntimeForm.waiting_for_downtime_end)
    
    # –ù–∞ —à–∞–≥–µ –¥–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    dp.register_message_handler(process_additional_comment, state=DowntimeForm.entering_additional_comment, content_types=[ContentType.TEXT])