# handlers/admin_handlers.py
import logging
from datetime import datetime
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pytz import timezone

# FSM
from fsm import AdminForm, PastDowntimeForm

# Filters, Storage, Config
from filters.admin_filter import AdminFilter
from utils.storage import DataStorage
from config import (
    USER_ID_COLUMN, USER_ROLE_COLUMN, SCHEDULER_TIMEZONE,
    PRODUCTION_SITES, DOWNTIME_REASONS, LINES_SECTIONS
)

# Keyboards
from keyboards.inline import (
    get_admin_roles_keyboard,
    get_sites_keyboard,
    get_lines_sections_keyboard,
    get_downtime_reasons_keyboard,
    get_responsible_groups_keyboard
)

# Reports & G-Sheets API
from utils.reports import (
    get_downtime_report_for_period,
    get_shift_time_range,
    generate_line_status_report,
    calculate_shift_times
)
from g_sheets.api import get_worksheet, append_downtime_record, get_next_sequence_number

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ ---
async def manage_roles_start(message: types.Message, state: FSMContext):
    await state.finish()
    await AdminForm.choosing_user_for_role.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:")

async def process_user_for_role(message: types.Message, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    user_input_id = message.text.strip()
    if not user_input_id.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return
    current_role = storage.user_roles.get(user_input_id, "–ù–µ—Ç —Ä–æ–ª–∏")
    await state.update_data(target_user_id=user_input_id, current_role=current_role)
    await AdminForm.next()
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_input_id}`\n–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: **{current_role}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", parse_mode='Markdown', reply_markup=get_admin_roles_keyboard())

async def process_role_choice(cb: types.CallbackQuery, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    new_role = cb.data.split('setrole_', 1)[1]
    user_data = await state.get_data()
    target_user_id = user_data.get('target_user_id')
    if not target_user_id or not storage.gspread_client:
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        return
    try:
        roles_ws = get_worksheet(storage.gspread_client, storage.user_roles_ws.title, [USER_ID_COLUMN, USER_ROLE_COLUMN])
        cell = roles_ws.find(target_user_id, in_column=1)
        action_message = ""
        if new_role == "DELETE":
            if cell: roles_ws.delete_rows(cell.row)
            action_message = f"–†–æ–ª—å –¥–ª—è `{target_user_id}` —É–¥–∞–ª–µ–Ω–∞."
        else:
            if cell: roles_ws.update_cell(cell.row, 2, new_role)
            else: roles_ws.append_row([target_user_id, new_role])
            action_message = f"–†–æ–ª—å –¥–ª—è `{target_user_id}` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{new_role}**."
        await storage.load_user_roles()
        await cb.message.edit_text(action_message, parse_mode='Markdown')
        await cb.answer("–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –¥–ª—è {target_user_id}: {e}")
        await cb.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets.")
    await state.finish()

async def cancel_admin_input(cb: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await cb.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await cb.answer()

# --- –û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å ---
async def send_shift_report(message: types.Message, shift_type: str):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    shift_name = '—Ç–µ–∫—É—â—É—é' if shift_type == 'current' else '–ø—Ä–µ–¥—ã–¥—É—â—É—é'
    await message.answer(f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ {shift_name} —Å–º–µ–Ω—É...")
    
    start_dt, end_dt = get_shift_time_range(shift_type)
    if not start_dt or not end_dt:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ —Å–º–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    reports_by_site, total_minutes, record_count, cache_status = await get_downtime_report_for_period(start_dt, end_dt, storage)

    # –ï—Å–ª–∏ record_count == 0, —Ç–æ –≤ cache_status —É–∂–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–ø–∏—Å–µ–π
    if record_count == 0:
        await message.answer(cache_status, parse_mode='Markdown')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_text = (f"‚úÖ **–û—Ç—á–µ—Ç –æ –ø—Ä–æ—Å—Ç–æ—è—Ö –∑–∞ {shift_name} —Å–º–µ–Ω—É**\n"
                   f"–ü–µ—Ä–∏–æ–¥: —Å {start_dt.strftime('%d.%m.%Y %H:%M')} –ø–æ {end_dt.strftime('%d.%m.%Y %H:%M')}\n"
                   f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {record_count}")
    await message.answer(header_text, parse_mode='Markdown')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–π –ø–ª–æ—â–∞–¥–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if not reports_by_site:
        await message.answer("–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ–≤.", parse_mode='Markdown')
    else:
        for site_name, report_text in reports_by_site.items():
            max_length = 4096
            if len(report_text) > max_length:
                for i in range(0, len(report_text), max_length):
                    await message.answer(report_text[i:i+max_length], parse_mode='Markdown')
            else:
                await message.answer(report_text, parse_mode='Markdown')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    summary_text = f"\nüìä **–û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –∑–∞ —Å–º–µ–Ω—É: {total_minutes} –º–∏–Ω—É—Ç.**"
    final_message = summary_text + cache_status
    await message.answer(final_message, parse_mode='Markdown')


async def send_line_status_now(message: types.Message):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –ª–∏–Ω–∏–π...")
    report_text = await generate_line_status_report(storage)
    await message.answer(report_text, parse_mode='Markdown')

# --- –í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –ø—Ä–æ—Å—Ç–æ—è ---
async def start_past_downtime(message: types.Message, state: FSMContext):
    await state.finish()
    await PastDowntimeForm.choosing_site.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É:", reply_markup=get_sites_keyboard())

async def past_downtime_site_chosen(cb: types.CallbackQuery, state: FSMContext):
    site_key = cb.data.split('_')[1]
    site_name = PRODUCTION_SITES[site_key]
    await state.update_data(site_key=site_key, site_name=site_name)
    await PastDowntimeForm.next()
    await cb.message.edit_text(
        f"–ü–ª–æ—â–∞–¥–∫–∞: {site_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é/—Å–µ–∫—Ü–∏—é:",
        reply_markup=get_lines_sections_keyboard(site_key)
    )
    await cb.answer()

async def past_downtime_line_chosen(cb: types.CallbackQuery, state: FSMContext):
    ls_key = cb.data.split('_')[1]
    async with state.proxy() as data:
        site_key = data['site_key']
        data['ls_key'] = ls_key
        data['ls_name'] = LINES_SECTIONS[site_key][ls_key]
    await PastDowntimeForm.next()
    await cb.message.edit_text(
        f"–õ–∏–Ω–∏—è/—Å–µ–∫—Ü–∏—è: {data['ls_name']}.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—è:",
        reply_markup=get_downtime_reasons_keyboard()
    )
    await cb.answer()
    
async def past_downtime_reason_chosen(cb: types.CallbackQuery, state: FSMContext):
    reason_key = cb.data.split('_', 1)[1]
    reason_name = DOWNTIME_REASONS[reason_key]
    await state.update_data(reason_key=reason_key, reason_name=reason_name)
    await PastDowntimeForm.next()
    await cb.message.edit_text(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {reason_name}.\n\n–í–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ù–ê–ß–ê–õ–ê** –ø—Ä–æ—Å—Ç–æ—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `27.06.2025 21:00`).")
    await cb.answer()

async def past_downtime_start_entered(message: types.Message, state: FSMContext):
    try:
        start_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(start_time=start_time)
        await PastDowntimeForm.next()
        await message.answer("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—è—Ç–æ.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –û–ö–û–ù–ß–ê–ù–ò–Ø** –ø—Ä–æ—Å—Ç–æ—è –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ (`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`).")
    except ValueError:
        await message.reply("‚ùóÔ∏è **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç–æ—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`.")

async def past_downtime_end_entered(message: types.Message, state: FSMContext):
    try:
        end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        async with state.proxy() as data:
            start_time = data.get('start_time')
            if end_time <= start_time:
                await message.reply("‚ùóÔ∏è **–û—à–∏–±–∫–∞.**\n–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
                return
            duration_minutes = max(1, int((end_time - start_time).total_seconds() / 60))
            data['end_time'] = end_time
            data['duration_minutes'] = duration_minutes
        await PastDowntimeForm.next()
        await message.answer(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–æ. –†–∞—Å—á–µ—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: **{duration_minutes} –º–∏–Ω.**\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ—Å—Ç–æ—è.")
    except ValueError:
        await message.reply("‚ùóÔ∏è **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç–æ—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`.")

async def past_downtime_description_entered(message: types.Message, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    await state.update_data(description=message.text)
    await PastDowntimeForm.next()
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É:", reply_markup=get_responsible_groups_keyboard(storage))

async def past_downtime_group_chosen(cb: types.CallbackQuery, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    group_key = cb.data.split('group_', 1)[1]
    group_name = storage.responsible_groups.get(group_key, "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    await state.update_data(responsible_group_name=group_name)
    await show_past_downtime_confirmation(cb.message, state)
    await cb.answer()

async def skip_past_downtime_group(cb: types.CallbackQuery, state: FSMContext):
    await state.update_data(responsible_group_name="–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    await show_past_downtime_confirmation(cb.message, state)
    await cb.answer()

async def show_past_downtime_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    start_time_str = data['start_time'].strftime('%d.%m.%Y %H:%M')
    end_time_str = data['end_time'].strftime('%d.%m.%Y %H:%M')
    text = [
        "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:**\n",
        f"**–ü–ª–æ—â–∞–¥–∫–∞:** {data['site_name']}", f"**–õ–∏–Ω–∏—è/–°–µ–∫—Ü–∏—è:** {data['ls_name']}",
        f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {data['reason_name']}", f"**–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å—Ç–æ—è:** {start_time_str}",
        f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—è:** {end_time_str}", f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {data['duration_minutes']} –º–∏–Ω.",
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}", f"**–û—Ç–≤. –≥—Ä—É–ø–ø–∞:** {data['responsible_group_name']}\n",
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    ]
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="past_downtime_save"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")
    )
    await PastDowntimeForm.confirming_submission.set()
    await message.edit_text("\n".join(text), parse_mode="Markdown", reply_markup=kb)

async def save_past_downtime(cb: types.CallbackQuery, state: FSMContext):
    dp = Dispatcher.get_current()
    storage: DataStorage = dp['storage']
    user = cb.from_user
    tz = timezone(SCHEDULER_TIMEZONE)

    async with state.proxy() as data:
        start_time = data.get('start_time')
        shift_start_str, shift_end_str = calculate_shift_times(start_time)
        next_seq_num = get_next_sequence_number(storage.downtime_ws)
        record_data = {
            "–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏": next_seq_num,
            "Timestamp_–∑–∞–ø–∏—Å–∏": datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S"),
            "ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_Telegram": user.id,
            "Username_Telegram": user.username or "N/A",
            "–ò–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_Telegram": f"{user.full_name} (–≤–Ω–µ—Å–µ–Ω–æ –∞–¥–º.)",
            "–ü–ª–æ—â–∞–¥–∫–∞": data.get('site_name', '–ù/–î'),
            "–õ–∏–Ω–∏—è_–°–µ–∫—Ü–∏—è": data.get('ls_name', '–ù/–î'),
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–ø—Ä–æ—Å—Ç–æ—è": data.get('reason_name', '–ù/–î'),
            "–ü—Ä–∏—á–∏–Ω–∞_–ø—Ä–æ—Å—Ç–æ—è_–æ–ø–∏—Å–∞–Ω–∏–µ": data.get('description', '–ù/–î'),
            "–í—Ä–µ–º—è_–ø—Ä–æ—Å—Ç–æ—è_–º–∏–Ω—É—Ç": data.get('duration_minutes', 0),
            "–ù–∞—á–∞–ª–æ_—Å–º–µ–Ω—ã_–ø—Ä–æ—Å—Ç–æ—è": shift_start_str, "–ö–æ–Ω–µ—Ü_—Å–º–µ–Ω—ã_–ø—Ä–æ—Å—Ç–æ—è": shift_end_str,
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è_–≥—Ä—É–ø–ø–∞": data.get('responsible_group_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            "–ö—Ç–æ_–ø—Ä–∏–Ω—è–ª_–∑–∞—è–≤–∫—É_ID": "", "–ö—Ç–æ_–ø—Ä–∏–Ω—è–ª_–∑–∞—è–≤–∫—É_–ò–º—è": "", "–í—Ä–µ–º—è_–ø—Ä–∏–Ω—è—Ç–∏—è_–∑–∞—è–≤–∫–∏": "",
            "–ö—Ç–æ_–∑–∞–≤–µ—Ä—à–∏–ª_—Ä–∞–±–æ—Ç—É_–≤_–≥—Ä—É–ø–ø–µ_ID": "", "–ö—Ç–æ_–∑–∞–≤–µ—Ä—à–∏–ª_—Ä–∞–±–æ—Ç—É_–≤_–≥—Ä—É–ø–ø–µ_–ò–º—è": "", "–í—Ä–µ–º—è_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è_—Ä–∞–±–æ—Ç—ã_–≥—Ä—É–ø–ø–æ–π": "",
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞": f"–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é {start_time.strftime('%d.%m %H:%M')} - {data['end_time'].strftime('%d.%m %H:%M')}",
            "ID_–§–æ—Ç–æ": ""
        }
    if append_downtime_record(storage.downtime_ws, record_data):
        await storage.refresh_downtime_cache(cb.bot)
        await cb.message.edit_text(f"‚úÖ **–ó–∞–ø–∏—Å—å –æ –ø—Ä–æ—à–µ–¥—à–µ–º –ø—Ä–æ—Å—Ç–æ–µ (‚Ññ{next_seq_num}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!**", parse_mode='Markdown')
    else:
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets.")
    await state.finish()
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(manage_roles_start, AdminFilter(), text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", state="*")
    dp.register_message_handler(process_user_for_role, state=AdminForm.choosing_user_for_role)
    dp.register_callback_query_handler(process_role_choice, lambda c: c.data.startswith('setrole_'), state=AdminForm.choosing_role_for_user)
    dp.register_callback_query_handler(cancel_admin_input, text="cancel_admin_role_input", state=AdminForm.all_states)
    dp.register_message_handler(lambda msg: send_shift_report(msg, 'current'), AdminFilter(), text="üìÑ –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É", state="*")
    dp.register_message_handler(lambda msg: send_shift_report(msg, 'previous'), AdminFilter(), text="üìÑ –û—Ç—á–µ—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–º–µ–Ω—É", state="*")
    dp.register_message_handler(send_line_status_now, AdminFilter(), text="üîÑ –°—Ç–∞—Ç—É—Å –ª–∏–Ω–∏–π", state="*")
    dp.register_message_handler(start_past_downtime, AdminFilter(), text="üóìÔ∏è –í–Ω–µ—Å—Ç–∏ –ø—Ä–æ—à–µ–¥—à–∏–π –ø—Ä–æ—Å—Ç–æ–π", state="*")
    dp.register_callback_query_handler(past_downtime_site_chosen, lambda c: c.data.startswith('site_'), state=PastDowntimeForm.choosing_site)
    dp.register_callback_query_handler(past_downtime_line_chosen, lambda c: c.data.startswith('ls_'), state=PastDowntimeForm.choosing_line_section)
    dp.register_callback_query_handler(past_downtime_reason_chosen, lambda c: c.data.startswith('reason_'), state=PastDowntimeForm.choosing_downtime_reason)
    dp.register_message_handler(past_downtime_start_entered, state=PastDowntimeForm.entering_downtime_start)
    dp.register_message_handler(past_downtime_end_entered, state=PastDowntimeForm.entering_downtime_end)
    dp.register_message_handler(past_downtime_description_entered, state=PastDowntimeForm.entering_description)
    dp.register_callback_query_handler(past_downtime_group_chosen, lambda c: c.data.startswith('group_'), state=PastDowntimeForm.choosing_responsible_group)
    dp.register_callback_query_handler(skip_past_downtime_group, text="skip_group_selection", state=PastDowntimeForm.choosing_responsible_group)
    dp.register_callback_query_handler(save_past_downtime, text="past_downtime_save", state=PastDowntimeForm.confirming_submission)
    dp.register_callback_query_handler(cancel_admin_input, text="cancel_input", state=[PastDowntimeForm.all_states, AdminForm.all_states])
